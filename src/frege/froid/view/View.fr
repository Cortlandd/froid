module froid.view.View where

data View = native android.view.View where
    pure native visible "android.view.View.VISIBLE" :: Int
    pure native invisible "android.view.View.INVISIBLE" :: Int
    native setOnClickListener :: MutableIO View -> MutableIO OnClickListener -> IO ()
    native setVisibility :: MutableIO View -> Int -> IO ()


data OnClickListener = native android.view.View.OnClickListener

native onClick "froid.view.View.onClickHandler" :: (MutableIO View -> IO ()) -> IO (MutableIO OnClickListener)

setViewOnClick :: MutableIO View -> (MutableIO View -> IO ()) -> IO ()
setViewOnClick v handler = do
                  listener <- onClick handler
                  v.setOnClickListener listener

native module where {
    public static android.view.View.OnClickListener
        onClickHandler(final frege.run7.Func.U<android.view.View, frege.run7.Func.U<RealWorld,Short>> lambda) {
        return new android.view.View.OnClickListener() {
            @Override
            public void onClick(android.view.View view) {
                try {
                    final frege.run7.Func.U<Object,Short> res = RunTM.<frege.run7.Func.U<Object,Short>>cast(lambda.apply(Thunk.lazy(view)).call()).call();
                    frege.prelude.PreludeBase.TST.run(res).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }
}
